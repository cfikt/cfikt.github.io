<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kubernetes 高可用部署</title>
      <link href="/k8s/install02/"/>
      <url>/k8s/install02/</url>
      
        <content type="html"><![CDATA[<h1 id="环境规划"><a href="#环境规划" class="headerlink" title="环境规划"></a>环境规划</h1><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>使用 Kubeadm 部署 Kubernetes 集群的前置条件：</p><ol><li>2 GB 以上内存，2 颗以上 CPU</li><li>各主机间实现无障碍网络通信</li><li>独占的 HostName、MAC 地址以及 Product_UUID（即不要直接复制虚拟机），主机名能够正常解析</li><li>放行 Kubernetes 集群使用到的各端口，或直接禁用 Iptables</li><li>禁用所有主机上的 Swap 分区设备</li><li>所有主机实现时间同步，保证时间一致</li></ol><p>​    </p><p>需要开放的端口：</p><div class="table-container"><table><thead><tr><th>节点</th><th>协议</th><th>端口</th><th>组件</th></tr></thead><tbody><tr><td>Master</td><td>TCP</td><td>6443</td><td>Kubernetes API Server</td></tr><tr><td></td><td>TCP</td><td>2379 - 2380</td><td>Etcd</td></tr><tr><td></td><td>TCP</td><td>10250</td><td>Kubelet</td></tr><tr><td></td><td>TCP</td><td>10251</td><td>Kube-Scheduler</td></tr><tr><td></td><td>TCP</td><td>10252</td><td>Kube-Controller-Manager</td></tr><tr><td>Worker</td><td>TCP</td><td>10250</td><td>Kubelet</td></tr><tr><td></td><td>TCP</td><td>30000 - 23767</td><td>NodePort Servicest</td></tr></tbody></table></div><p>​    </p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>系统 OS：Rocky 8.6</li><li>Docker：20.10.22（文章发布时的最新版本）</li><li>Kubernetes：1.26.0（文章发布时的最新版本）</li><li>CRI：cri-dockerd v0.3.0（文章发布时的最新版本）</li><li>网络环境：<ul><li>节点网络：10.0.0.0/16</li><li>Pod 网络：10.244.0.0/16（Flannel 网络插件）</li><li>Service网络：10.96.0.0/12</li></ul></li></ul><div class="table-container"><table><thead><tr><th>IP 地址</th><th>主机名</th><th>角色</th></tr></thead><tbody><tr><td>10.0.0.10</td><td>k8s-master01, www.k8s.com</td><td>Master</td></tr><tr><td>10.0.0.20</td><td>k8s-master02, www.k8s.com</td><td>Master</td></tr><tr><td>10.0.0.30</td><td>k8s-master03, www.k8s.com</td><td>Master</td></tr><tr><td>10.0.0.11</td><td>k8s-node01</td><td>Worker</td></tr><tr><td>10.0.0.21</td><td>k8s-node02</td><td>Worker</td></tr><tr><td>10.0.0.31</td><td>k8s-node03</td><td>Worker</td></tr></tbody></table></div><p>​    </p><p>​    </p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="禁用防火墙"><a href="#禁用防火墙" class="headerlink" title="禁用防火墙"></a>禁用防火墙</h2><p><strong>所有机器均操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭 SELinux</span></span><br><span class="line">[root@all ~]<span class="comment"># sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 FireWalld</span></span><br><span class="line">[root@all ~]<span class="comment"># systemctl disable --now firewalld</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="配置主机名称"><a href="#配置主机名称" class="headerlink" title="配置主机名称"></a>配置主机名称</h2><p><strong>所有机器均操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s-master01</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># hostnamectl set-hostname k8s-master01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s-master02</span></span><br><span class="line">[root@k8s-master02 ~]<span class="comment"># hostnamectl set-hostname k8s-master02</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s-master03</span></span><br><span class="line">[root@k8s-master03 ~]<span class="comment"># hostnamectl set-hostname k8s-master03</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s-node01</span></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># hostnamectl set-hostname k8s-node01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s-node02</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># hostnamectl set-hostname k8s-node02</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s-node03</span></span><br><span class="line">[root@k8s-node03 ~]<span class="comment"># hostnamectl set-hostname k8s-node03</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="主机名称解析"><a href="#主机名称解析" class="headerlink" title="主机名称解析"></a>主机名称解析</h2><p><strong>所有机器均操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有机器配置 Hosts 文件</span></span><br><span class="line">[root@all ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line">10.0.0.10   k8s-master01    www.k8s.com</span><br><span class="line">10.0.0.20   k8s-master02</span><br><span class="line">10.0.0.30   k8s-master03</span><br><span class="line">10.0.0.11   k8s-node01</span><br><span class="line">10.0.0.21   k8s-node02</span><br><span class="line">10.0.0.31   k8s-node03</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="设定时间同步"><a href="#设定时间同步" class="headerlink" title="设定时间同步"></a>设定时间同步</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">k8s-master01</button></li><li class="tab"><button type="button" data-href="#1-2">其它节点</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p><strong>k8s-master01 机器操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装时间同步服务 chrony</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># yum install -y chrony</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># vim /etc/chrony.conf</span></span><br><span class="line"><span class="comment"># pool 2.pool.ntp.org iburst</span></span><br><span class="line">server ntp.tencent.com iburst</span><br><span class="line">server ntp.aliyun.com iburst</span><br><span class="line"></span><br><span class="line"><span class="comment"># allow 192.168.0.0/16</span></span><br><span class="line">allow 0.0.0.0/0</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> stratum 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启时间同步服务</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># systemctl restart chronyd</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p><strong>所有剩余机器执行相同步骤，这里使用 k8s-node01 作示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装时间同步服务 chrony</span></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># yum install -y chrony</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># vim /etc/chrony.conf</span></span><br><span class="line">server 10.0.0.10 iburst</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启时间同步服务</span></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># systemctl restart chronyd</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>​    </p><h2 id="禁用-Swap-设备"><a href="#禁用-Swap-设备" class="headerlink" title="禁用 Swap 设备"></a>禁用 Swap 设备</h2><p><strong>所有机器均操作</strong></p><p>​    </p><p>Swap 是交换分区，如果机器内存不够，会使用 Swap 分区，但是 Swap 分区的性能较低，K8s 设计的时候为了能提升性能，默认是不允许使用交换分区的。Kubeadm 初始化的时候会检测 Swap 是否 关闭，如果没关闭，那就初始化失败。如果不想要关闭交换分区，安装 K8s 的时候可以指定 —ignore-preflight-errors=Swap 来解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭已启用的 Swap 设备</span></span><br><span class="line">[root@all ~]<span class="comment"># swapoff -a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 /etc/fstab 配置文件，注释用于挂载 Swap 设备的所有行</span></span><br><span class="line">[root@all ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">/dev/mapper/rl-swapnoneswapdefaults0 0<span class="comment"># 删除此行</span></span><br></pre></td></tr></table></figure><p>​    </p><p>​    </p><h1 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h1><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p><strong>所有机器均操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备脚本文件</span></span><br><span class="line">[root@all ~]<span class="comment"># cat install_docker.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">DOCKER_VERSION=<span class="string">&quot;20.10.22&quot;</span></span><br><span class="line"><span class="comment">#UBUNTU_DOCKER_VERSION=&quot;5:$&#123;DOCKER_VERSION&#125;~3-0~`lsb_release -si`-`lsb_release -cs`&quot;</span></span><br><span class="line">UBUNTU_DOCKER_VERSION=<span class="string">&quot;5:<span class="variable">$&#123;DOCKER_VERSION&#125;</span>~3-0~ubuntu-focal&quot;</span></span><br><span class="line"></span><br><span class="line">. /etc/os-release</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> color  &#123;</span><br><span class="line">    RES_COL=60</span><br><span class="line">    MOVE_TO_COL=<span class="string">&quot;echo -en \\033[<span class="variable">$&#123;RES_COL&#125;</span>G&quot;</span></span><br><span class="line">    SETCOLOR_SUCCESS=<span class="string">&quot;echo -en \\033[1;32m&quot;</span></span><br><span class="line">    SETCOLOR_FAILURE=<span class="string">&quot;echo -en \\033[1;31m&quot;</span></span><br><span class="line">    SETCOLOR_WARNING=<span class="string">&quot;echo -en \\033[1;33m&quot;</span></span><br><span class="line">    SETCOLOR_NORMAL=<span class="string">&quot;echo -en \E[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> &amp;&amp; <span class="variable">$MOVE_TO_COL</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;[&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$2</span> = <span class="string">&quot;success&quot;</span> -o <span class="variable">$2</span> = <span class="string">&quot;0&quot;</span> ] ;<span class="keyword">then</span></span><br><span class="line">        <span class="variable">$&#123;SETCOLOR_SUCCESS&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">&quot;    OK    &quot;</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$2</span> = <span class="string">&quot;failure&quot;</span> -o <span class="variable">$2</span> = <span class="string">&quot;1&quot;</span>  ] ;<span class="keyword">then</span></span><br><span class="line">        <span class="variable">$&#123;SETCOLOR_FAILURE&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">&quot;  FAILED  &quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="variable">$&#123;SETCOLOR_WARNING&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">&quot;  WARNING  &quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="variable">$&#123;SETCOLOR_NORMAL&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;]&quot;</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> install_docker &#123;</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$ID</span> = <span class="string">&#x27;centos&#x27;</span> -o <span class="variable">$ID</span> = <span class="string">&#x27;rocky&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$VERSION_ID</span> = <span class="string">&quot;7&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/docker.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[docker]</span></span><br><span class="line"><span class="string">name=docker</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">#baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.cloud.tencent.com/docker-ce/linux/centos/7/x86_64/stable</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/docker.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[docker]</span></span><br><span class="line"><span class="string">name=docker</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">enable=1</span></span><br><span class="line"><span class="string">#baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/8/x86_64/stable/</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.cloud.tencent.com/docker-ce/linux/centos/8/x86_64/stable</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">rpm -q docker-ce $&gt; /dev/null &amp;&amp; color <span class="string">&quot;Docker 已安装，程序退出&quot;</span> 2 &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum install -y docker-ce-<span class="variable">$&#123;DOCKER_VERSION&#125;</span> docker-ce-cli-<span class="variable">$&#123;DOCKER_VERSION&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dpkg -s docker-ce &amp;&gt; /dev/null &amp;&amp; color <span class="string">&quot;Docker 已安装，程序退出&quot;</span> 2 &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">apt update &amp;&amp; apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br><span class="line">curl -fsSL https://mirrors.cloud.tencent.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">add-apt-repository <span class="string">&quot;deb [arch=amd64] https://mirrors.cloud.tencent.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line">apt update &amp;&amp; apt install -y docker-ce=<span class="variable">$&#123;UBUNTU_DOCKER_VERSION&#125;</span> docker-ce-cli=<span class="variable">$&#123;UBUNTU_DOCKER_VERSION&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">color <span class="string">&quot;Docker 安装成功&quot;</span>  0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">color <span class="string">&quot;Docker 安装失败，请检查网络配置&quot;</span> 1</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> config_docker &#123;</span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">    <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line"><span class="string">&quot;https://mirror.ccs.tencentyun.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;http://f1361db2.m.daocloud.io&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">    systemctl daemon-reload</span><br><span class="line">    systemctl <span class="built_in">enable</span> docker</span><br><span class="line">    systemctl restart docker</span><br><span class="line">    docker version &amp;&amp; color <span class="string">&quot;Docker 安装成功，镜像加速配置成功&quot;</span> 0 ||  color <span class="string">&quot;Docker 安装失败&quot;</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">install_docker</span><br><span class="line">config_docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">[root@all ~]<span class="comment"># bash install_docker.sh</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="安装-cri-docker"><a href="#安装-cri-docker" class="headerlink" title="安装 cri-docker"></a>安装 cri-docker</h2><p>Kubernetes 自 v1.24 移除了对 docker-shim 的支持，而 Docker Engine 默认不支持 CRI 规范，因而两者无法直接完成整合。为此，Mirantis 和 Docker 联合创建了 cri-docker 项目，用于为 Docker Engine 提供一个能够支持到 CRI 规范的垫片，从而能够实现让 Kubernetes 基于 CRI 控制 Docker</p><p>​    </p><p><strong>所有机器均操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 cri-docker 二进制程序包</span></span><br><span class="line">[root@all ~]<span class="comment"># wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.0/cri-dockerd-0.3.0-3.el8.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 cri-docker</span></span><br><span class="line">[root@all ~]<span class="comment"># rpm -ivh cri-dockerd-0.3.0-3.el8.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置开机自启</span></span><br><span class="line">[root@all ~]<span class="comment"># systemctl enable --now cri-docker.service</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="安装-K8s-相关软件"><a href="#安装-K8s-相关软件" class="headerlink" title="安装 K8s 相关软件"></a>安装 K8s 相关软件</h2><p><strong>所有机器均操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置仓库</span></span><br><span class="line">[root@all ~]<span class="comment"># cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF </span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=kubernetes</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Kubelet、Kubeadm 和 Kubuctl 特定版本。默认为最新版</span></span><br><span class="line">[root@all ~]<span class="comment"># yum install -y kubelet kubeadm kubectl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Kubelet 开机自启（不启动）</span></span><br><span class="line">[root@all ~]<span class="comment"># systemctl enable kubelet.service</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="整合-cri-docker"><a href="#整合-cri-docker" class="headerlink" title="整合 cri-docker"></a>整合 cri-docker</h2><p><strong>所有机器均操作</strong></p><p>​    </p><p>配置 cri-dockerd，确保其能够正确加载到 CNI 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出相关镜像文件</span></span><br><span class="line">[root@all ~]<span class="comment"># kubeadm config images list --image-repository=registry.aliyuncs.com/google_container</span></span><br><span class="line">......</span><br><span class="line">registry.aliyuncs.com/google_container/pause:3.9</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 cri-docker 的 service 文件。修改 ExecStart 配置段</span></span><br><span class="line">[root@all ~]<span class="comment"># vim /lib/systemd/system/cri-docker.service</span></span><br><span class="line">ExecStart=/usr/bin/cri-dockerd --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9 --container-runtime-endpoint fd:// --network-plugin=cni --cni-bin-dir=/opt/cni/bin --cni-cache-dir=/var/lib/cni/cache --cni-conf-dir=/etc/cni/net.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载 service 文件并重启服务</span></span><br><span class="line">[root@all ~]<span class="comment"># systemctl daemon-reload; systemctl restart cri-docker.service</span></span><br></pre></td></tr></table></figure><p>配置参数详解：各参数的值要与系统部署的 CNI 插件的实际路径相对应</p><ul><li>—pod-infra-container-image：指定镜像</li><li>—network-plugin：指定网络插件规范的类型，这里要使用 CNI</li><li>—cni-bin-dir：指定 CNI 插件二进制程序文件的搜索目录</li><li>—cni-cache-dir：CNI 插件使用的缓存目录</li><li>—cni-conf-dir：CNI 插件加载配置文件的目录</li></ul><p>​    </p><h2 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h2><p>开始尝试构建 Kubenetes 集群的 Master 节点，配置完成后，将各 Worker 节点直接加入到集群当中即可。需要特别说明的是，由 Kubeadm 部署的 Kubernetes 集群上，集群核心组件 Kube-ApiServer、Kube-Controller-Manager、Kube-Scheduler 和 ETCD 等均会以静态 Pod 的形式运行</p><div class="tabs" id="2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2-1">拉取相关镜像</button></li><li class="tab"><button type="button" data-href="#2-2">初始化集群</button></li><li class="tab"><button type="button" data-href="#2-3">初始化完成后的操作步骤</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2-1"><p><strong>在 k8s-master01 机器上操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 Kubernetes 版本</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm version</span></span><br><span class="line">...... GitVersion:<span class="string">&quot;v1.26.0&quot;</span>, ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出相关镜像文件（--kubernetes-version 根据 Kubeadm、Kubelet、kubectl 的版本所更改）</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm config images list --image-repository=registry.aliyuncs.com/google_containers --kubernetes-version 1.26.0</span></span><br><span class="line">registry.aliyuncs.com/google_containers/kube-apiserver:v1.26.0</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-controller-manager:v1.26.0</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-scheduler:v1.26.0</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-proxy:v1.26.0</span><br><span class="line">registry.aliyuncs.com/google_containers/pause:3.9</span><br><span class="line">registry.aliyuncs.com/google_containers/etcd:3.5.6-0</span><br><span class="line">registry.aliyuncs.com/google_containers/coredns:v1.9.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm config images pull --image-repository=registry.aliyuncs.com/google_containers --kubernetes-version 1.26.0 --cri-socket unix:///run/cri-dockerd.sock</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2-2"><p><strong>在 k8s-master01 机器上操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备初始化节点配置文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm config print init-defaults &gt; kubeadm-config.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># cat kubeadm-config.yaml</span></span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class="line">bootstrapTokens:</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 10.0.0.10<span class="comment"># 第一个控制节点的 IP 地址</span></span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: unix:///run/cri-dockerd.sock<span class="comment"># 指定 CRI 套接字文件路径</span></span><br><span class="line">  imagePullPolicy: IfNotPresent<span class="comment"># 镜像拉取策略</span></span><br><span class="line">  name: k8s-master01<span class="comment"># 第一个控制节点的主机名称</span></span><br><span class="line">  taints: null</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class="line">controlPlaneEndpoint: <span class="string">&quot;www.k8s.com:6443&quot;</span><span class="comment"># 控制平面的固定访问端点</span></span><br><span class="line">certificatesDir: /etc/kubernetes/pki<span class="comment"># CA 证书存放路径</span></span><br><span class="line">clusterName: kubernetes<span class="comment"># 集群名称</span></span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns: &#123;&#125;</span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    dataDir: /var/lib/etcd</span><br><span class="line">imageRepository: registry.aliyuncs.com/google_containers<span class="comment"># 指定镜像仓库地址</span></span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: 1.26.0<span class="comment"># Kubernetes 集群版本</span></span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  serviceSubnet: 10.96.0.0/12<span class="comment"># Service 的网络地址。默认为 10.96.0.0/12</span></span><br><span class="line">  podSubnet: 10.244.0.0/16<span class="comment"># Pod 网络的地址（Flannel 插件为 10.244.0.0/16； Project Calico 插件为 192.168.0.0/16），根据需求更改，本示例使用 Flannel</span></span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: <span class="string">&quot;ipvs&quot;</span><span class="comment"># 指定 Kube-Proxy 上 Service 的代理模式。默认为 Iptables</span></span><br><span class="line">---</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">cgroupDriver: systemd<span class="comment"># 配置 kubelet 的 cgroup 为 systemd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化第一个 Master 节点</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm init --config kubeadm-config.yaml --upload-certs</span></span><br></pre></td></tr></table></figure><p>​    </p><p>若选项配置错误，需要重新初始化，可使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm reset --cri-socket unix:///run/cri-dockerd.sock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除相关目录</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># rm -rf /etc/kubernetes /var/lib/kubelet/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2-3"><p>对于 Kubernetes 系统的新用户来说，初始化命令执行成功后，请记录最后的 kubeadm join 命令输出的最后提示的操作步骤，完成后续操作</p><details class="toggle" style="border: 1px solid orange"><summary class="toggle-button" style="background-color: orange;color: color">第一个步骤提示：Kubernetes 集群管理员认证到 Kubernetes 集群时使用的 kubeconfig 配置文件</summary><div class="toggle-content"><p><strong>在所有控制平面机器上操作</strong></p><p><img src="https://files-cloud.oss-cn-guangzhou.aliyuncs.com/img/202301170347546.png" alt="image-20230115001539911"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 家目录下创建隐藏目录 .kube</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># mkdir -p $HOME/.kube</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 Kubernetes 集群认证信息文件到 .kube 目录下</span></span><br><span class="line">[root@k8s-master ~]<span class="comment"># cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" style="border: 1px solid orange"><summary class="toggle-button" style="background-color: orange;color: color">第二个步骤提示：为 Kubernetes 集群部署一个网络插件，具体选用的插件则取决于管理员</summary><div class="toggle-content"><p><strong>在 k8s-master01 机器上操作</strong></p><p><img src="https://files-cloud.oss-cn-guangzhou.aliyuncs.com/img/202301170348852.png" alt="image-20230115024623315"></p><details class="toggle" ><summary class="toggle-button" style="">Flannel 网络插件（本示例使用）</summary><div class="toggle-content"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 Flanneld 文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># wget https://github.com/flannel-io/flannel/releases/download/v0.20.2/flanneld-amd64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动该文件到指定目录并修改名称</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># mkdir /opt/bin</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># mv flanneld-amd64 /opt/bin/flanneld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予可执行权限</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># chmod +x /opt/bin/flanneld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝到其它所有节点</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># scp -rp /opt/bin/flanneld k8s-master02:/opt/</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># scp -rp /opt/bin/flanneld k8s-master03:/opt/</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># scp -rp /opt/bin/flanneld k8s-node01:/opt/</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># scp -rp /opt/bin/flanneld k8s-node02:/opt/</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># scp -rp /opt/bin/flanneld k8s-node03:/opt/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署 Flannel 插件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看验证</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl get pods -n kube-flannel</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">Calico 网络插件</summary><div class="toggle-content"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 Project Calico 配置文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml -O</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置文件中镜像</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># cat calico.yaml | grep image: | uniq</span></span><br><span class="line">          image: docker.io/calico/cni:v3.25.0</span><br><span class="line">          image: docker.io/calico/node:v3.25.0</span><br><span class="line">          image: docker.io/calico/kube-controllers:v3.25.0</span><br><span class="line">          </span><br><span class="line"><span class="comment"># 手动下载镜像（因为会从国外站点拉取镜像，受网络原因容易失败，建议手动拉取镜像成功后再执行后续操作）</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># docker pull docker.io/calico/cni:v3.25.0</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># docker pull docker.io/calico/node:v3.25.0</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># docker pull docker.io/calico/kube-controllers:v3.25.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过配置文件对资源进行配置</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl apply -f calico.yaml</span></span><br></pre></td></tr></table></figure></div></details></div></details><details class="toggle" style="border: 1px solid orange"><summary class="toggle-button" style="background-color: orange;color: color">第三个步骤提示：向集群添加额外的控制平面节点，将其它 Master 节点加入集群中</summary><div class="toggle-content"><p><strong>在需要加入到集群的其它控制平面节点上执行</strong></p><p><img src="https://files-cloud.oss-cn-guangzhou.aliyuncs.com/img/202301170349410.png" alt="image-20230115024642384"></p><div class="tabs" id="3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#3-1">k8s-master02</button></li><li class="tab"><button type="button" data-href="#3-2">k8s-master03</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="3-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s-master02 加入集群</span></span><br><span class="line">[root@k8s-master02 ~]<span class="comment"># kubeadm join www.k8s.com:6443 --token j7fcj0.37cjvko9irz58zqz \</span></span><br><span class="line">--discovery-token-ca-cert-hash sha256:3aeca4ef1e9964413ee0de91831cb5026d71b29fc853900e4a5499b70c0e0f1d \</span><br><span class="line">--control-plane --certificate-key e919ea3b33a26a2bab862b8be2b68ae1bf011e8532198b726acb92213c15f0a2 \</span><br><span class="line">--cri-socket unix:///run/cri-dockerd.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 家目录下创建隐藏目录 .kube</span></span><br><span class="line">[root@k8s-master02 ~]<span class="comment"># mkdir -p $HOME/.kube</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 Kubernetes 集群认证信息文件到 .kube 目录下</span></span><br><span class="line">[root@k8s-master02 ~]<span class="comment"># cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 FQDN 解析到自身 IP</span></span><br><span class="line">[root@k8s-master02 ~]<span class="comment"># cat /ets/hosts</span></span><br><span class="line">10.0.0.10   k8s-master01</span><br><span class="line">10.0.0.20   k8s-master02    www.k8s.com</span><br><span class="line">10.0.0.30   k8s-master03</span><br><span class="line">10.0.0.11   k8s-node01</span><br><span class="line">10.0.0.21   k8s-node02</span><br><span class="line">10.0.0.31   k8s-node03</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s-master03 加入集群</span></span><br><span class="line">[root@k8s-master03 ~]<span class="comment"># kubeadm join www.k8s.com:6443 --token j7fcj0.37cjvko9irz58zqz \</span></span><br><span class="line">--discovery-token-ca-cert-hash sha256:3aeca4ef1e9964413ee0de91831cb5026d71b29fc853900e4a5499b70c0e0f1d \</span><br><span class="line">--control-plane --certificate-key e919ea3b33a26a2bab862b8be2b68ae1bf011e8532198b726acb92213c15f0a2 \</span><br><span class="line">--cri-socket unix:///run/cri-dockerd.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 家目录下创建隐藏目录 .kube</span></span><br><span class="line">[root@k8s-master03 ~]<span class="comment"># mkdir -p $HOME/.kube</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 Kubernetes 集群认证信息文件到 .kube 目录下</span></span><br><span class="line">[root@k8s-master03 ~]<span class="comment"># cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 FQDN 解析到自身 IP</span></span><br><span class="line">[root@k8s-master03 ~]<span class="comment"># cat /ets/hosts</span></span><br><span class="line">10.0.0.10   k8s-master01</span><br><span class="line">10.0.0.20   k8s-master02    </span><br><span class="line">10.0.0.30   k8s-master03    www.k8s.com</span><br><span class="line">10.0.0.11   k8s-node01</span><br><span class="line">10.0.0.21   k8s-node02</span><br><span class="line">10.0.0.31   k8s-node03</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div></details><details class="toggle" style="border: 1px solid orange"><summary class="toggle-button" style="background-color: orange;color: color">第四个步骤提示：向集群添加工作节点。在 Worker 节点上执行</summary><div class="toggle-content"><p><strong>在需要加入到集群的工作节点上操作</strong></p><p><img src="https://files-cloud.oss-cn-guangzhou.aliyuncs.com/img/202301170350468.png" alt="image-20230115024736715"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s-node01</span></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># kubeadm join www.k8s.com:6443 --token j7fcj0.37cjvko9irz58zqz \</span></span><br><span class="line">--discovery-token-ca-cert-hash sha256:3aeca4ef1e9964413ee0de91831cb5026d71b29fc853900e4a5499b70c0e0f1d \</span><br><span class="line">--cri-socket unix:///run/cri-dockerd.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s-node02</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># kubeadm join www.k8s.com:6443 --token j7fcj0.37cjvko9irz58zqz \</span></span><br><span class="line">--discovery-token-ca-cert-hash sha256:3aeca4ef1e9964413ee0de91831cb5026d71b29fc853900e4a5499b70c0e0f1d \</span><br><span class="line">--cri-socket unix:///run/cri-dockerd.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s-node03</span></span><br><span class="line">[root@k8s-node03 ~]<span class="comment"># kubeadm join www.k8s.com:6443 --token j7fcj0.37cjvko9irz58zqz \</span></span><br><span class="line">--discovery-token-ca-cert-hash sha256:3aeca4ef1e9964413ee0de91831cb5026d71b29fc853900e4a5499b70c0e0f1d \</span><br><span class="line">--cri-socket unix:///run/cri-dockerd.sock</span><br></pre></td></tr></table></figure></div></details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>​    </p><h2 id="高可用部署"><a href="#高可用部署" class="headerlink" title="高可用部署"></a>高可用部署</h2><p><strong>在所有工作节点上操纵</strong></p><div class="tabs" id="4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#4-1">k8s-node01</button></li><li class="tab"><button type="button" data-href="#4-2">k8s-node02</button></li><li class="tab"><button type="button" data-href="#4-3">k8s-node03</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="4-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Nginx</span></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># yum install -y nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 Nginx 配置文件。在顶级配置段添加如下配置</span></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">stream &#123;</span><br><span class="line">    upstream apiserver &#123;</span><br><span class="line">        server k8s-master01:6443 max_fails=2 fail_timeout=30s;</span><br><span class="line">        server k8s-master02:6443 max_fails=2 fail_timeout=30s;</span><br><span class="line">        server k8s-master03:6443 max_fails=2 fail_timeout=30s;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 6443;</span><br><span class="line">        proxy_pass apiserver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Nginx 服务</span></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># systemctl enable --now nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 Hosts 文件，将 FQDN 解析到当前主机</span></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># cat /ets/hosts</span></span><br><span class="line">10.0.0.10   k8s-master01</span><br><span class="line">10.0.0.20   k8s-master02</span><br><span class="line">10.0.0.30   k8s-master03</span><br><span class="line">10.0.0.11   k8s-node01    www.k8s.com</span><br><span class="line">10.0.0.21   k8s-node02</span><br><span class="line">10.0.0.31   k8s-node03</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="4-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Nginx</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># yum install -y nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 Nginx 配置文件。在顶级配置段添加如下配置</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">stream &#123;</span><br><span class="line">    upstream apiserver &#123;</span><br><span class="line">        server k8s-master01:6443 max_fails=2 fail_timeout=30s;</span><br><span class="line">        server k8s-master02:6443 max_fails=2 fail_timeout=30s;</span><br><span class="line">        server k8s-master03:6443 max_fails=2 fail_timeout=30s;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 6443;</span><br><span class="line">        proxy_pass apiserver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Nginx 服务</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># systemctl enable --now nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 Hosts 文件，将 FQDN 解析到当前主机</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># cat /ets/hosts</span></span><br><span class="line">10.0.0.10   k8s-master01</span><br><span class="line">10.0.0.20   k8s-master02</span><br><span class="line">10.0.0.30   k8s-master03</span><br><span class="line">10.0.0.11   k8s-node01    </span><br><span class="line">10.0.0.21   k8s-node02    www.k8s.com</span><br><span class="line">10.0.0.31   k8s-node03</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="4-3"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Nginx</span></span><br><span class="line">[root@k8s-node03 ~]<span class="comment"># yum install -y nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 Nginx 配置文件。在顶级配置段添加如下配置</span></span><br><span class="line">[root@k8s-node03 ~]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line">stream &#123;</span><br><span class="line">    upstream apiserver &#123;</span><br><span class="line">        server k8s-master01:6443 max_fails=2 fail_timeout=30s;</span><br><span class="line">        server k8s-master02:6443 max_fails=2 fail_timeout=30s;</span><br><span class="line">        server k8s-master03:6443 max_fails=2 fail_timeout=30s;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 6443;</span><br><span class="line">        proxy_pass apiserver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Nginx 服务</span></span><br><span class="line">[root@k8s-node03 ~]<span class="comment"># systemctl enable --now nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 Hosts 文件，将 FQDN 解析到当前主机</span></span><br><span class="line">[root@k8s-node03 ~]<span class="comment"># cat /ets/hosts</span></span><br><span class="line">10.0.0.10   k8s-master01</span><br><span class="line">10.0.0.20   k8s-master02</span><br><span class="line">10.0.0.30   k8s-master03</span><br><span class="line">10.0.0.11   k8s-node01   </span><br><span class="line">10.0.0.21   k8s-node02</span><br><span class="line">10.0.0.31   k8s-node03    www.k8s.com</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>​    </p><h2 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Master 节点查看集群状态</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME           STATUS   ROLES           AGE   VERSION</span><br><span class="line">k8s-master01   Ready    control-plane   15m   v1.26.0</span><br><span class="line">k8s-master02   Ready    control-plane   24m   v1.26.0</span><br><span class="line">k8s-master03   Ready    control-plane   27m   v1.26.0</span><br><span class="line">k8s-node01     Ready    &lt;none&gt;          80s   v1.26.0</span><br><span class="line">k8s-node02     Ready    &lt;none&gt;          81s   v1.26.0</span><br><span class="line">k8s-node03     Ready    &lt;none&gt;          83s   v1.26.0</span><br></pre></td></tr></table></figure><p>​    </p><p>​    </p><h1 id="Kubernetes-部署后传"><a href="#Kubernetes-部署后传" class="headerlink" title="Kubernetes 部署后传"></a>Kubernetes 部署后传</h1><h2 id="工作节点报错"><a href="#工作节点报错" class="headerlink" title="工作节点报错"></a>工作节点报错</h2><p>在工作节点执行 kubectl 命令出现以下报错。该报错通常情况下可忽略，在任何节点上，只要能够正确指向 API-Servce 并且安装了 kubectl 命令以及存在 KubeConfig 文件即可实现通过 kubectl 命令管理节点</p><p><img src="https://files-cloud.oss-cn-guangzhou.aliyuncs.com/img/202301181301875.png" alt="image-20230118130133764"></p><div class="tip info"><p>报错原因：kubectl 是一个命令行接口，用于对 Kubernetes 集群运行命令。kubectl 使用 KubeConfig 文件组织有关集群、用户、命名空间和身份认证机制的信息，根据 KubeConfig 文件，来查找选择集群所需的信息，并与集群的API服务进行通信。默认情况下，kubectl 会在 $HOME/.kube 目录下查找名为 config 的文件，若不存在则会出现以上报错信息</p></div><p>解决办法：将初始化 Master 节点中的第一个步骤提示的文件拷贝到 Node 上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 家目录下创建隐藏目录 .kube</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># mkdir -p $HOME/.kube</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 Master 中的 Kubernetes 集群认证信息文件到 .kube 目录下</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># scp k8s-master01:/etc/kubernetes/admin.conf $HOME/.kube/config</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Kubectl-命令补全"><a href="#Kubectl-命令补全" class="headerlink" title="Kubectl 命令补全"></a>Kubectl 命令补全</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Bash 命令补全工具包</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># yum install -y bash-completion</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 kubectl 命令补全脚本</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl &gt; /dev/null</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生效配置文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># source /usr/share/bash-completion/bash_completion</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> 容器云 </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 部署</title>
      <link href="/k8s/install01/"/>
      <url>/k8s/install01/</url>
      
        <content type="html"><![CDATA[<h1 id="环境规划"><a href="#环境规划" class="headerlink" title="环境规划"></a>环境规划</h1><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>使用 Kubeadm 部署 Kubernetes 集群的前置条件：</p><ol><li>2 GB 以上内存，2 颗以上 CPU</li><li>各主机间实现无障碍网络通信</li><li>独占的 HostName、MAC 地址以及 Product_UUID（即不要直接复制虚拟机），主机名能够正常解析</li><li>放行 Kubernetes 集群使用到的各端口，或直接禁用 Iptables</li><li>禁用所有主机上的 Swap 分区设备</li><li>所有主机实现时间同步，保证时间一致</li></ol><p>​    </p><p>需要开放的端口：</p><div class="table-container"><table><thead><tr><th>节点</th><th>协议</th><th>端口</th><th>组件</th></tr></thead><tbody><tr><td>Master</td><td>TCP</td><td>6443</td><td>Kubernetes API Server</td></tr><tr><td></td><td>TCP</td><td>2379 - 2380</td><td>Etcd</td></tr><tr><td></td><td>TCP</td><td>10250</td><td>Kubelet</td></tr><tr><td></td><td>TCP</td><td>10251</td><td>Kube-Scheduler</td></tr><tr><td></td><td>TCP</td><td>10252</td><td>Kube-Controller-Manager</td></tr><tr><td>Worker</td><td>TCP</td><td>10250</td><td>Kubelet</td></tr><tr><td></td><td>TCP</td><td>30000 - 23767</td><td>NodePort Servicest</td></tr></tbody></table></div><p>​    </p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>系统 OS：Rocky 8.6</li><li>Docker：20.10.22（文章发布时的最新版本）</li><li>Kubernetes：1.26.0（文章发布时的最新版本）</li><li>CRI：cri-dockerd v0.3.0（文章发布时的最新版本）</li><li>网络环境：<ul><li>节点网络：10.0.0.0/16</li><li>Pod 网络：192.168.0.0/16（Project Calico 网络插件）</li><li>Service网络：10.96.0.0/12</li></ul></li></ul><div class="table-container"><table><thead><tr><th>IP 地址</th><th>主机名</th><th>角色</th></tr></thead><tbody><tr><td>10.0.0.10</td><td>k8s-master01, www.k8s.com</td><td>Master</td></tr><tr><td>10.0.0.11</td><td>k8s-node01</td><td>Worker</td></tr><tr><td>10.0.0.21</td><td>k8s-node02</td><td>Worker</td></tr></tbody></table></div><p>​    </p><p>​    </p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="禁用防火墙"><a href="#禁用防火墙" class="headerlink" title="禁用防火墙"></a>禁用防火墙</h2><p><strong>所有机器均操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭 SELinux</span></span><br><span class="line">[root@all ~]<span class="comment"># sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 FireWalld</span></span><br><span class="line">[root@all ~]<span class="comment"># systemctl disable --now firewalld</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="配置主机名称"><a href="#配置主机名称" class="headerlink" title="配置主机名称"></a>配置主机名称</h2><p><strong>所有机器单独操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s-master01</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># hostnamectl set-hostname k8s-master01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s-node01</span></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># hostnamectl set-hostname k8s-node01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s-node02</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># hostnamectl set-hostname k8s-node02</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="主机名称解析"><a href="#主机名称解析" class="headerlink" title="主机名称解析"></a>主机名称解析</h2><p><strong>所有机器均操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有机器配置 Hosts 文件</span></span><br><span class="line">[root@all ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line">10.0.0.10   k8s-master01    www.k8s.com</span><br><span class="line">10.0.0.11   k8s-node01</span><br><span class="line">10.0.0.21   k8s-node02</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="设定时间同步"><a href="#设定时间同步" class="headerlink" title="设定时间同步"></a>设定时间同步</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">k8s-master01</button></li><li class="tab"><button type="button" data-href="#1-2">其他节点</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p><strong>k8s-master01 机器操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装时间同步服务 chrony</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># yum install -y chrony</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># vim /etc/chrony.conf</span></span><br><span class="line"><span class="comment"># pool 2.pool.ntp.org iburst</span></span><br><span class="line">server ntp.tencent.com iburst</span><br><span class="line">server ntp.aliyun.com iburst</span><br><span class="line"></span><br><span class="line"><span class="comment"># allow 192.168.0.0/16</span></span><br><span class="line">allow 0.0.0.0/0</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> stratum 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启时间同步服务</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># systemctl restart chronyd</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p><strong>k8s-node01，k8s-node02 机器操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装时间同步服务 chrony</span></span><br><span class="line">[root@k8s-node ~]<span class="comment"># yum install -y chrony</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">[root@k8s-node ~]<span class="comment"># vim /etc/chrony.conf</span></span><br><span class="line">server 10.0.0.10 iburst</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启时间同步服务</span></span><br><span class="line">[root@k8s-node ~]<span class="comment"># systemctl restart chronyd</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>​    </p><h2 id="禁用-Swap-设备"><a href="#禁用-Swap-设备" class="headerlink" title="禁用 Swap 设备"></a>禁用 Swap 设备</h2><p><strong>所有机器均操作</strong></p><p>​    </p><p>Swap 是交换分区，如果机器内存不够，会使用 Swap 分区，但是 Swap 分区的性能较低，K8s 设计的时候为了能提升性能，默认是不允许使用交换分区的。Kubeadm 初始化的时候会检测 Swap 是否 关闭，如果没关闭，那就初始化失败。如果不想要关闭交换分区，安装 K8s 的时候可以指定 —ignore-preflight-errors=Swap 来解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭已启用的 Swap 设备</span></span><br><span class="line">[root@all ~]<span class="comment"># swapoff -a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 /etc/fstab 配置文件，注释用于挂载 Swap 设备的所有行</span></span><br><span class="line">[root@all ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">/dev/mapper/rl-swapnoneswapdefaults0 0<span class="comment"># 删除此行</span></span><br></pre></td></tr></table></figure><p>​    </p><p>​    </p><h1 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h1><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p><strong>所有机器均操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备脚本文件</span></span><br><span class="line">[root@all ~]<span class="comment"># cat install_docker.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">DOCKER_VERSION=<span class="string">&quot;20.10.22&quot;</span></span><br><span class="line"><span class="comment">#UBUNTU_DOCKER_VERSION=&quot;5:$&#123;DOCKER_VERSION&#125;~3-0~`lsb_release -si`-`lsb_release -cs`&quot;</span></span><br><span class="line">UBUNTU_DOCKER_VERSION=<span class="string">&quot;5:<span class="variable">$&#123;DOCKER_VERSION&#125;</span>~3-0~ubuntu-focal&quot;</span></span><br><span class="line"></span><br><span class="line">. /etc/os-release</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> color  &#123;</span><br><span class="line">    RES_COL=60</span><br><span class="line">    MOVE_TO_COL=<span class="string">&quot;echo -en \\033[<span class="variable">$&#123;RES_COL&#125;</span>G&quot;</span></span><br><span class="line">    SETCOLOR_SUCCESS=<span class="string">&quot;echo -en \\033[1;32m&quot;</span></span><br><span class="line">    SETCOLOR_FAILURE=<span class="string">&quot;echo -en \\033[1;31m&quot;</span></span><br><span class="line">    SETCOLOR_WARNING=<span class="string">&quot;echo -en \\033[1;33m&quot;</span></span><br><span class="line">    SETCOLOR_NORMAL=<span class="string">&quot;echo -en \E[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> &amp;&amp; <span class="variable">$MOVE_TO_COL</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;[&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$2</span> = <span class="string">&quot;success&quot;</span> -o <span class="variable">$2</span> = <span class="string">&quot;0&quot;</span> ] ;<span class="keyword">then</span></span><br><span class="line">        <span class="variable">$&#123;SETCOLOR_SUCCESS&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">&quot;    OK    &quot;</span></span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$2</span> = <span class="string">&quot;failure&quot;</span> -o <span class="variable">$2</span> = <span class="string">&quot;1&quot;</span>  ] ;<span class="keyword">then</span></span><br><span class="line">        <span class="variable">$&#123;SETCOLOR_FAILURE&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">&quot;  FAILED  &quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="variable">$&#123;SETCOLOR_WARNING&#125;</span></span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">&quot;  WARNING  &quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="variable">$&#123;SETCOLOR_NORMAL&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;]&quot;</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> install_docker &#123;</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$ID</span> = <span class="string">&#x27;centos&#x27;</span> -o <span class="variable">$ID</span> = <span class="string">&#x27;rocky&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$VERSION_ID</span> = <span class="string">&quot;7&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/docker.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[docker]</span></span><br><span class="line"><span class="string">name=docker</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">#baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.cloud.tencent.com/docker-ce/linux/centos/7/x86_64/stable</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/docker.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[docker]</span></span><br><span class="line"><span class="string">name=docker</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">enable=1</span></span><br><span class="line"><span class="string">#baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/8/x86_64/stable/</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.cloud.tencent.com/docker-ce/linux/centos/8/x86_64/stable</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">rpm -q docker-ce $&gt; /dev/null &amp;&amp; color <span class="string">&quot;Docker 已安装，程序退出&quot;</span> 2 &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum install -y docker-ce-<span class="variable">$&#123;DOCKER_VERSION&#125;</span> docker-ce-cli-<span class="variable">$&#123;DOCKER_VERSION&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dpkg -s docker-ce &amp;&gt; /dev/null &amp;&amp; color <span class="string">&quot;Docker 已安装，程序退出&quot;</span> 2 &amp;&amp; <span class="built_in">exit</span></span><br><span class="line">apt update &amp;&amp; apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br><span class="line">curl -fsSL https://mirrors.cloud.tencent.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">add-apt-repository <span class="string">&quot;deb [arch=amd64] https://mirrors.cloud.tencent.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line">apt update &amp;&amp; apt install -y docker-ce=<span class="variable">$&#123;UBUNTU_DOCKER_VERSION&#125;</span> docker-ce-cli=<span class="variable">$&#123;UBUNTU_DOCKER_VERSION&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">color <span class="string">&quot;Docker 安装成功&quot;</span>  0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">color <span class="string">&quot;Docker 安装失败，请检查网络配置&quot;</span> 1</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> config_docker &#123;</span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">    <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line"><span class="string">&quot;https://mirror.ccs.tencentyun.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;http://f1361db2.m.daocloud.io&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">    systemctl daemon-reload</span><br><span class="line">    systemctl <span class="built_in">enable</span> docker</span><br><span class="line">    systemctl restart docker</span><br><span class="line">    docker version &amp;&amp; color <span class="string">&quot;Docker 安装成功，镜像加速配置成功&quot;</span> 0 ||  color <span class="string">&quot;Docker 安装失败&quot;</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">install_docker</span><br><span class="line">config_docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本</span></span><br><span class="line">[root@all ~]<span class="comment"># bash install_docker.sh</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="安装-cri-docker"><a href="#安装-cri-docker" class="headerlink" title="安装 cri-docker"></a>安装 cri-docker</h2><p>Kubernetes 自 v1.24 移除了对 docker-shim 的支持，而 Docker Engine 默认不支持 CRI 规范，因而两者无法直接完成整合。为此，Mirantis 和 Docker 联合创建了 cri-docker 项目，用于为 Docker Engine 提供一个能够支持到 CRI 规范的垫片，从而能够实现让 Kubernetes 基于 CRI 控制 Docker</p><p>​    </p><p><strong>所有机器均操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 cri-docker 二进制程序包</span></span><br><span class="line">[root@all ~]<span class="comment"># wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.0/cri-dockerd-0.3.0-3.el8.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 cri-docker</span></span><br><span class="line">[root@all ~]<span class="comment"># rpm -ivh cri-dockerd-0.3.0-3.el8.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置开机自启</span></span><br><span class="line">[root@all ~]<span class="comment"># systemctl enable --now cri-docker.service</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="安装-K8s-相关软件"><a href="#安装-K8s-相关软件" class="headerlink" title="安装 K8s 相关软件"></a>安装 K8s 相关软件</h2><p><strong>所有机器均操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置仓库</span></span><br><span class="line">[root@all ~]<span class="comment"># cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF </span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=kubernetes</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Kubelet、Kubeadm 和 Kubuctl 特定版本。默认为最新版</span></span><br><span class="line">[root@all ~]<span class="comment"># yum install -y kubelet kubeadm kubectl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Kubelet 开机自启（不启动）</span></span><br><span class="line">[root@all ~]<span class="comment"># systemctl enable kubelet.service</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="整合-cri-docker"><a href="#整合-cri-docker" class="headerlink" title="整合 cri-docker"></a>整合 cri-docker</h2><p><strong>所有机器均操作</strong></p><p>​    </p><p>配置 cri-dockerd，确保其能够正确加载到 CNI 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出相关镜像文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm config images list --image-repository=registry.aliyuncs.com/google_container</span></span><br><span class="line">registry.aliyuncs.com/google_container/pause:3.9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 cri-docker 的 service 文件。修改 ExecStart 配置段</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># vim /lib/systemd/system/cri-docker.service</span></span><br><span class="line">ExecStart=/usr/bin/cri-dockerd --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9 --container-runtime-endpoint fd:// --network-plugin=cni --cni-bin-dir=/opt/cni/bin --cni-cache-dir=/var/lib/cni/cache --cni-conf-dir=/etc/cni/net.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载 service 文件并重启服务</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># systemctl daemon-reload; systemctl restart cri-docker.service</span></span><br></pre></td></tr></table></figure><p>配置参数详解：各参数的值要与系统部署的 CNI 插件的实际路径相对应</p><ul><li>—pod-infra-container-image：指定镜像</li><li>—network-plugin：指定网络插件规范的类型，这里要使用 CNI</li><li>—cni-bin-dir：指定 CNI 插件二进制程序文件的搜索目录</li><li>—cni-cache-dir：CNI 插件使用的缓存目录</li><li>—cni-conf-dir：CNI 插件加载配置文件的目录</li></ul><p>​    </p><h2 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h2><p>开始尝试构建 Kubenetes 集群的 Master 节点，配置完成后，将各 Worker 节点直接加入到集群当中即可。需要特别说明的是，由 Kubeadm 部署的 Kubernetes 集群上，集群核心组件 Kube-ApiServer、Kube-Controller-Manager、Kube-Scheduler 和 ETCD 等均会以静态 Pod 的形式运行</p><div class="tabs" id="2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2-1">拉取相关镜像</button></li><li class="tab"><button type="button" data-href="#2-2">初始化集群</button></li><li class="tab"><button type="button" data-href="#2-3">初始化完成后的操作步骤</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2-1"><p><strong>在 k8s-master01 机器上操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 Kubernetes 版本</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm version</span></span><br><span class="line">...... GitVersion:<span class="string">&quot;v1.26.0&quot;</span>, ......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出相关镜像文件（--kubernetes-version 根据 Kubeadm、Kubelet、kubectl 的版本所更改）</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm config images list --image-repository=registry.aliyuncs.com/google_containers --kubernetes-version 1.26.0</span></span><br><span class="line">registry.aliyuncs.com/google_containers/kube-apiserver:v1.26.0</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-controller-manager:v1.26.0</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-scheduler:v1.26.0</span><br><span class="line">registry.aliyuncs.com/google_containers/kube-proxy:v1.26.0</span><br><span class="line">registry.aliyuncs.com/google_containers/pause:3.9</span><br><span class="line">registry.aliyuncs.com/google_containers/etcd:3.5.6-0</span><br><span class="line">registry.aliyuncs.com/google_containers/coredns:v1.9.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm config images pull --image-repository=registry.aliyuncs.com/google_containers --kubernetes-version 1.26.0 --cri-socket unix:///run/cri-dockerd.sock</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2-2"><p><strong>在 k8s-master01 机器上操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备初始化节点配置文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm config print init-defaults &gt; kubeadm-config.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># cat kubeadm-config.yaml</span></span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class="line">bootstrapTokens:</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 10.0.0.10<span class="comment"># 第一个控制节点的 IP 地址</span></span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: unix:///run/cri-dockerd.sock<span class="comment"># 指定 CRI 套接字文件路径</span></span><br><span class="line">  imagePullPolicy: IfNotPresent<span class="comment"># 镜像拉取策略</span></span><br><span class="line">  name: k8s-master01<span class="comment"># 第一个控制节点的主机名称</span></span><br><span class="line">  taints: null</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class="line">controlPlaneEndpoint: <span class="string">&quot;www.k8s.com:6443&quot;</span><span class="comment"># 控制平面的固定访问端点</span></span><br><span class="line">certificatesDir: /etc/kubernetes/pki<span class="comment"># CA 证书存放路径</span></span><br><span class="line">clusterName: kubernetes<span class="comment"># 集群名称</span></span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns: &#123;&#125;</span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    dataDir: /var/lib/etcd</span><br><span class="line">imageRepository: registry.aliyuncs.com/google_containers<span class="comment"># 指定镜像仓库地址</span></span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: 1.26.0<span class="comment"># Kubernetes 集群版本</span></span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  serviceSubnet: 10.96.0.0/12<span class="comment"># Service 的网络地址。默认为 10.96.0.0/12</span></span><br><span class="line">  podSubnet: 192.168.0.0/16<span class="comment"># Pod 网络的地址（Flannel 插件为 10.244.0.0/16； Project Calico 插件为 192.168.0.0/16），根据需求更改，本示例使用 Calico</span></span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: <span class="string">&quot;ipvs&quot;</span><span class="comment"># 指定 Kube-Proxy 上 Service 的代理模式。默认为 Iptables</span></span><br><span class="line">---</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">cgroupDriver: systemd<span class="comment"># 配置 kubelet 的 cgroup 为 systemd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化第一个 Master 节点</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm init --config kubeadm-config.yaml --upload-certs</span></span><br></pre></td></tr></table></figure><p>​    </p><p>若选项配置错误，需要重新初始化，可使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubeadm reset --cri-socket unix:///run/cri-dockerd.sock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除相关目录</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># rm -rf /etc/kubernetes /var/lib/kubelet/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2-3"><p>对于 Kubernetes 系统的新用户来说，初始化命令执行成功后，请记录最后的 kubeadm join 命令输出的最后提示的操作步骤，完成后续操作</p><details class="toggle" style="border: 1px solid orange"><summary class="toggle-button" style="background-color: orange;color: color">第一个步骤提示：Kubernetes 集群管理员认证到 Kubernetes 集群时使用的 kubeconfig 配置文件</summary><div class="toggle-content"><p><strong>在 k8s-master01 机器上操作</strong></p><p><img src="https://files-cloud.oss-cn-guangzhou.aliyuncs.com/img/202301170347546.png" alt="image-20230115001539911"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 家目录下创建隐藏目录 .kube</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># mkdir -p $HOME/.kube</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 Kubernetes 集群认证信息文件到 .kube 目录下</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" style="border: 1px solid orange"><summary class="toggle-button" style="background-color: orange;color: color">第二个步骤提示：为 Kubernetes 集群部署一个网络插件，具体选用的插件则取决于管理员</summary><div class="toggle-content"><p><strong>在 k8s-master01 机器上操作</strong></p><p><img src="https://files-cloud.oss-cn-guangzhou.aliyuncs.com/img/202301170348852.png" alt="image-20230115024623315"></p><details class="toggle" ><summary class="toggle-button" style="">Calico 网络插件（本示例使用）</summary><div class="toggle-content"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 Project Calico 配置文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml -O</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置文件中镜像</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># cat calico.yaml | grep image: | uniq</span></span><br><span class="line">          image: docker.io/calico/cni:v3.25.0</span><br><span class="line">          image: docker.io/calico/node:v3.25.0</span><br><span class="line">          image: docker.io/calico/kube-controllers:v3.25.0</span><br><span class="line">          </span><br><span class="line"><span class="comment"># 手动下载镜像（因为会从国外站点拉取镜像，受网络原因容易失败，建议手动拉取镜像成功后再执行后续操作）</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># docker pull docker.io/calico/cni:v3.25.0</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># docker pull docker.io/calico/node:v3.25.0</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># docker pull docker.io/calico/kube-controllers:v3.25.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过配置文件对资源进行配置</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl apply -f calico.yaml</span></span><br></pre></td></tr></table></figure></div></details><details class="toggle" ><summary class="toggle-button" style="">Flannel 网络插件</summary><div class="toggle-content"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 Flanneld 文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># wget https://github.com/flannel-io/flannel/releases/download/v0.20.2/flanneld-amd64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动该文件到指定目录并修改名称</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># mkdir /opt/bin</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># mv flanneld-amd64 /opt/bin/flanneld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予可执行权限</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># chmod +x /opt/bin/flanneld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署 Flannel 插件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看验证</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl get pods -n kube-flannel</span></span><br></pre></td></tr></table></figure></div></details></div></details><details class="toggle" style="border: 1px solid orange"><summary class="toggle-button" style="background-color: orange;color: color">第三个步骤提示：向集群添加额外的控制平面节点，即将其它 Master 节点加入集群中</summary><div class="toggle-content"><p><strong>在需要加入到集群的其它控制平面节点上操作（本示例只有一个控制平面节点，跳过该步骤）</strong></p><p><img src="https://files-cloud.oss-cn-guangzhou.aliyuncs.com/img/202301170349410.png" alt="image-20230115024642384"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在其它 Master 节点上执行提示命令即可，本示例跳过</span></span><br><span class="line">kubeadm <span class="built_in">join</span> www.k8s.com:6443 --token j7fcj0.37cjvko9irz58zqz \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:3aeca4ef1e9964413ee0de91831cb5026d71b29fc853900e4a5499b70c0e0f1d \</span><br><span class="line">--control-plane --certificate-key e919ea3b33a26a2bab862b8be2b68ae1bf011e8532198b726acb92213c15f0a2 \</span><br><span class="line">--cri-socket unix:///run/cri-dockerd.sock</span><br></pre></td></tr></table></figure></div></details><details class="toggle" style="border: 1px solid orange"><summary class="toggle-button" style="background-color: orange;color: color">第四个步骤提示：向集群添加工作节点</summary><div class="toggle-content"><p><strong>在需要加入到集群的工作节点上操作，即本示例中的 k8s-node01，k8s-node02</strong></p><p><img src="https://files-cloud.oss-cn-guangzhou.aliyuncs.com/img/202301170350468.png" alt="image-20230115024736715"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s-node01 执行</span></span><br><span class="line">[root@k8s-node01 ~]<span class="comment"># kubeadm join www.k8s.com:6443 --token j7fcj0.37cjvko9irz58zqz \</span></span><br><span class="line">--discovery-token-ca-cert-hash sha256:3aeca4ef1e9964413ee0de91831cb5026d71b29fc853900e4a5499b70c0e0f1d \</span><br><span class="line">--cri-socket unix:///run/cri-dockerd.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s-node02 执行</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># kubeadm join www.k8s.com:6443 --token j7fcj0.37cjvko9irz58zqz \</span></span><br><span class="line">--discovery-token-ca-cert-hash sha256:3aeca4ef1e9964413ee0de91831cb5026d71b29fc853900e4a5499b70c0e0f1d \</span><br><span class="line">--cri-socket unix:///run/cri-dockerd.sock</span><br></pre></td></tr></table></figure></div></details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>​    </p><h2 id="查看集群状态"><a href="#查看集群状态" class="headerlink" title="查看集群状态"></a>查看集群状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Master 节点查看集群状态</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME           STATUS   ROLES           AGE   VERSION</span><br><span class="line">k8s-master01   Ready    control-plane   15m   v1.26.0</span><br><span class="line">k8s-node01     Ready    &lt;none&gt;          80s   v1.26.0</span><br><span class="line">k8s-node02     Ready    &lt;none&gt;          81s   v1.26.0</span><br></pre></td></tr></table></figure><p>​    </p><p>​    </p><h1 id="Kubernetes-部署后传"><a href="#Kubernetes-部署后传" class="headerlink" title="Kubernetes 部署后传"></a>Kubernetes 部署后传</h1><h2 id="工作节点报错"><a href="#工作节点报错" class="headerlink" title="工作节点报错"></a>工作节点报错</h2><p>在工作节点执行 kubectl 命令出现以下报错。该报错通常情况下可忽略，在任何节点上，只要能够正确指向 API-Servce 并且安装了 kubectl 命令以及存在 KubeConfig 文件即可实现通过 kubectl 命令管理节点</p><p><img src="https://files-cloud.oss-cn-guangzhou.aliyuncs.com/img/202301181301875.png" alt="image-20230118130133764"></p><div class="tip info"><p>报错原因：kubectl 是一个命令行接口，用于对 Kubernetes 集群运行命令。kubectl 使用 KubeConfig 文件组织有关集群、用户、命名空间和身份认证机制的信息，根据 KubeConfig 文件，来查找选择集群所需的信息，并与集群的API服务进行通信。默认情况下，kubectl 会在 $HOME/.kube 目录下查找名为 config 的文件，若不存在则会出现以上报错信息</p></div><p>解决办法：将初始化 Master 节点中的第一个步骤提示的文件拷贝到 Node 上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 家目录下创建隐藏目录 .kube</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># mkdir -p $HOME/.kube</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 Master 中的 Kubernetes 集群认证信息文件到 .kube 目录下</span></span><br><span class="line">[root@k8s-node02 ~]<span class="comment"># scp k8s-master01:/etc/kubernetes/admin.conf $HOME/.kube/config</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="Kubectl-命令补全"><a href="#Kubectl-命令补全" class="headerlink" title="Kubectl 命令补全"></a>Kubectl 命令补全</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Bash 命令补全工具包</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># yum install -y bash-completion</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载配置文件</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># source /usr/share/bash-completion/bash_completion</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时生效 kubectl 命令补全</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># source &lt;(kubectl completion bash)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前用户永久生效 kubectl 命令补全</span></span><br><span class="line">[root@k8s-master01 ~]<span class="comment"># echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> 容器云 </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 简介</title>
      <link href="/k8s/k8s01/"/>
      <url>/k8s/k8s01/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetes-简介"><a href="#Kubernetes-简介" class="headerlink" title="Kubernetes 简介"></a>Kubernetes 简介</h1><h2 id="Kubernetes-是什么"><a href="#Kubernetes-是什么" class="headerlink" title="Kubernetes 是什么"></a>Kubernetes 是什么</h2><p>Kubernetes 简称为 K8s，是一个用于大规模运行分布式应用和服务的开源容器编排平台；Kubernetes 将多个容器组成一个逻辑单元便于管理，主要实现自动部署、自动扩缩容和管理容器化应用程序等功能，<strong>是一个开源的容器集群管理系统</strong></p><p>​    </p><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>分解 Kubernetes 定义</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><ul><li>容器化应用：Kubernetes 管理的应用都是容器化的，可以是 Docker 容器，也可以是其它容器。容器化的好处就是应用之间资源隔离，便于管理</li><li>自动化部署：Kubernetes 可以将容器组织成应用自动化部署到集群中</li><li>自动扩缩容：Kubernetes 可以对容器的个数或者说应用的副本数根据需要进行自动扩容或缩容</li><li>管理：对容器化应用的管理，比如说容器之间的依赖关系，编排关系等</li></ul></div></div></div><p>​    </p><h2 id="Kubernetes-特性"><a href="#Kubernetes-特性" class="headerlink" title="Kubernetes 特性"></a>Kubernetes 特性</h2><ul><li>服务发现与负载均衡：Kubernrter 可以通过 DNS 名称或者 IP 地址暴露容器的访问方式，并且可以在同组容器内分发负载以实现负载均衡</li><li>自动装箱：可以根据容器的描述定义将容器自动打包成一个调度单元，并通过特定的调度算法，将其调度到集群的某一台机器上运行</li><li>自动修复：Kubernetes 定期对节点或容器进行检查，对连续多次未通过状态检查的节点或容器进行自动修复，保证集群中的节点或容器始终处于健康状态</li><li>存储编排：Kubernetes 支持多种存储，可以是本地存储、云存储或远端存储。只需要在配置文件中指定存储类型，Kubernetes 就会自动做存储编排，并保证存储和应用的生命周期一致</li><li>应用自动发布和回滚：Kubernetes 提供了应用自动发布和回滚的机制。可以在 Kubernetes 中声明期望容器应该达到的状态，Kubernetes 将以合适的速率调整容器的实际状态，并逐步达到最终期望的结果</li><li>弹性伸缩：Kubernetes 可以对应用程序容器根据需要进行弹性伸缩</li></ul><p>​    </p><p>​    </p><h1 id="Kubernetes-相关知识"><a href="#Kubernetes-相关知识" class="headerlink" title="Kubernetes 相关知识"></a>Kubernetes 相关知识</h1><h2 id="Kubernetes-集群"><a href="#Kubernetes-集群" class="headerlink" title="Kubernetes 集群"></a>Kubernetes 集群</h2><p>Kubernetes 通常是一个集群，运行在多个独立的主机之上。Kubernetes 集群由 Master 和 Worker 两类节点组成：</p><ul><li>Master（控制节点，主节点）：负责编排工作节点上运行容器的所有相关活动，负责管理集群，提供集群的资源数据访问入口，接收请求并调度和部署集群应用，采集工作节点和 Pods 的信息</li><li>Worker（Node，工作节点）：Kubernetes 所管理的容器运行在工作节点之上，被主节点进行调度和管理</li></ul><p>​    </p><p><strong>Kubernetes 集群运行逻辑：</strong>工作节点与主节点的所有通信均通过 kube-proxy，进而执行所有集群操作</p><blockquote><ul><li>Kubernetes 将所有工作节点的资源集中在一起形成一台更加强大的 “服务器”</li><li>计算和存储接口通过 Master 之上的 API Server 暴露</li><li>客户端通过 API 提交应用程序的运行请求，而后由 Master 通过调度算法将其自动指派至某个特定的工作节点以 Pod 对象的形式运行</li><li>Master 会自动处理因工作节点的添加、故障或转移等变动对 Pod 的影响</li></ul></blockquote><p>​    </p><h2 id="Kubernetes-组件"><a href="#Kubernetes-组件" class="headerlink" title="Kubernetes 组件"></a>Kubernetes 组件</h2><p><strong>核心组件：</strong></p><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1-1">Master</button></li><li class="tab"><button type="button" data-href="#1-2">Worker</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><p>Master 主要由 API Server、Controller-Manager（控制器管理器） 和 Scheduler（调度器） 三个组件，以及一个用于存储集群状态的 Etcd 存储服务组成，它们构成整个集群的控制平面</p><ul><li>Kube-API-Server：声明式 API，整个集群的 API 网关。Kubernetes 系统的入口，为集群内的对象验证并配置数据，封装了核心对象的增删改查操作，集群内各个功能模块之间数据交互和通信的中心枢纽</li><li>Kube-Controller-Manager：控制器管理器，集群内部的的管理控制中心。负责执行各种控制器保证 Kubernetes 的正常运行，将 API 声明转化为具体的实现</li><li>Kube-Scheduler：调度器。为未完成绑定的 Pod 进行节点（Node）选择（即分配机器），负责集群的资源调度</li><li>Etcd：一个高可用的键值对存储系统。保存整个集群的状态，存储集群中所有需要持久化的数据，主要用于配置共享和服务发现</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><p>Node 主要包含 Kubelet、Kube Proxy 和容器进行时（通常使用 Docker 实现）三个组件，它们承载并运行各类应用容器</p><ul><li>Kubelet：运行在每个 Worker 节点的代理组件。Pod 生命周期管理，负责接收并执行 Master 发来的指令，管理由 Scheduler 分配到当前节点上的 Pod 对象<ul><li>CRI：对接外部的容器运行时<ul><li>Container RunTime（容器进行时）：负责镜像管理理以及 Pod 和容器器的真正运⾏，为 Kubernetes 创建的容器提供网络、通信、持久化存储等资源</li></ul></li><li>CNI：对接外部的虚拟（容器）网络</li><li>CSI：对接外部的共享存储服务</li></ul></li><li>Kube Proxy：运行在每个 Worker 节点之上。Service 功能在节点级的实现，具体来说就是把 Service 的定义转换为节点上的 Iptables 或 Ipvs 规则。核心功能是将到某个 Service 的访问请求转发到后端的多个 Pod 实例上</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>​    </p><p><strong>可选组件：</strong></p><ul><li>Kube-DNS：集群 DNS 服务器。为整个集群提供 DNS 服务，负责服务注册、发现和名称解析</li></ul><p>​    </p><h2 id="Kubernetes-网络通信"><a href="#Kubernetes-网络通信" class="headerlink" title="Kubernetes 网络通信"></a>Kubernetes 网络通信</h2><p><strong>Kubernetes 网络模型：</strong>Kubernetes 集群上会存在三个分别用于节点、Pod 和 Service 的网络，每个网络都拥有各自的网段：</p><blockquote><ul><li>节点网络：集群节点间的通信网络，负责打通集群与集群外部之间的通信。即宿主机的网络，需要于 Kubernetes 部署前完成配置</li><li>Pod 网络：为集群上的 Pod 对象提供的网络。虚拟网络，需要经由 CNI 网络插件实现</li><li>Service 网络：Service 对象网络。在部署 Kubernetes 集群时指定，各 Service 对象使用的地址将从该网络中分配，存在于相关的 Iptables 或 Ipvs 规则中</li></ul></blockquote><p>​    </p><p><strong>Kubernetes 集群中的通信流量：</strong></p><blockquote><ul><li>同一 Pod 内的容器间通信：通过 lo 接口即可实现</li><li>Pod 间的通信：通过 Pod 网络</li><li>Pod 和 Service 间的通信：通过内核中的 Service 网络规则</li><li>集群外部与 Service 间的通信：通过节点网络到达内核，再到达 Serive，经由 Service 再转发给 Pod</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> 容器云 </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 容器技术</title>
      <link href="/docker/docker/"/>
      <url>/docker/docker/</url>
      
        <content type="html"><![CDATA[<p>在学习 Docker 之前，建议提前了解容器技术，便于在学习 Docker 的过程中理解其中的实现原理或者实现过程；在学习了一些相对头疼的概念知识之后，可以更轻松的面对 Docker 容器技术的学习</p><ul><li><a href="/docker/docker01/" title="认识容器">认识容器</a></li><li><a href="/docker/docker02/" title="容器相关技术">容器相关技术</a></li></ul><p>​    </p><p>​    </p><p>在了解了容器相关的概念知识之后，接下来就正式开始进入 Docker 的学习之旅了，不管学习任何服务，第一步，也是最重要的一步，那就是将其部署在自己的环境上，否则一切都是空谈</p><ul><li><a href="/docker/docker03/" title="Docker 简介">Docker 简介</a></li><li><a href="/docker/docker04/" title="Docker 安装">Docker 安装</a></li></ul><p>​    </p><p>​    </p><p>镜像是 Docker 中最重要的三大概念之一，镜像是运行容器的必要条件，使用镜像可以方便、快速的创建并启动容器</p><ul><li><a href="/docker/docker05/" title="Docker 镜像管理">Docker 镜像管理</a></li><li><a href="/docker/docker07/" title="Docker 镜像制作">Docker 镜像制作</a></li></ul><p>​    </p><p>​    </p><p>Dockerfile 是一种可以被 Docker 程序解释执行的脚本文件，由若干条构建镜像所需的指令和说明组成。使用 Dockerfile 可以根据实际业务需要构建符合生产环境的 Docker 镜像，避免手动重复部署镜像的繁琐过程，大大节约了项目部署的时间成本，达到高效的制作 Docker 镜像</p><ul><li><a href="/docker/docker08/" title="Dockerfile 简介">Dockerfile 简介</a></li><li><a href="/docker/docker09/" title="Dockerfile 指令详解">Dockerfile 指令详解</a></li></ul><p>​    </p><p>​    </p><p>容器是镜像运行时的实例，可以将容器看作一个应用程序及其依赖环境打包而成的集装箱，其本质就是将镜像中的程序启动后生成的进程。容器与镜像的关系类似于虚拟机与虚拟机模板</p><ul><li><a href="/docker/docker06/" title="Docker 容器管理">Docker 容器管理</a></li><li><a href="/docker/docker10/" title="Docker 数据管理">Docker 数据管理</a></li></ul><p>​    </p><p>​    </p><p>当成功部署并开始大规模使用 Docker 容器时，网络将会成为 Docker 比较薄弱的部分，因此需要深入了解 Docker 的网络知识，以满足更高的网络需求</p><ul><li><a href="/docker/docker11/" title="Docker 网络模式">Docker 网络模式</a></li><li><a href="/docker/docker12/" title="Docker 网络通信">Docker 网络通信</a></li></ul><p>​    </p><p>​    </p><p>当在一个宿主机内启动较多容器时，如果手动操作会比较繁琐且容器出错，也比较难以控制多个容器之间的启动顺序或者依赖关系，此时推荐使用 Docker 官方的单机编排工具 docker-compose</p><ul><li><a href="/docker/docker13/" title="Docker Compose 简介">Docker Compose 简介</a></li><li><a href="/docker/docker14/" title="Docker Compose 文件详解">Docker Compose 文件详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> 容器云 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算 SRE 运维 — 作业集</title>
      <link href="/tasks/task/"/>
      <url>/tasks/task/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="/tasks/task01/" title="云计算 SRE 运维 — 第一周">云计算 SRE 运维 — 第一周</a></li><li><a href="/tasks/task02/" title="云计算 SRE 运维 — 第二周">云计算 SRE 运维 — 第二周</a></li><li><a href="/tasks/task03/" title="云计算 SRE 运维 — 第三周">云计算 SRE 运维 — 第三周</a></li><li><a href="/tasks/task04/" title="云计算 SRE 运维 — 第四周">云计算 SRE 运维 — 第四周</a></li><li><a href="/tasks/task05/" title="云计算 SRE 运维 — 第五周">云计算 SRE 运维 — 第五周</a></li><li><a href="/tasks/task06/" title="云计算 SRE 运维 — 第六周">云计算 SRE 运维 — 第六周</a></li><li><a href="/tasks/task07/" title="云计算 SRE 运维 — 第七周">云计算 SRE 运维 — 第七周</a></li><li><a href="/tasks/task08/" title="云计算 SRE 运维 — 第八周">云计算 SRE 运维 — 第八周</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 SRE 运维 - 作业集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> SRE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 误删除文件恢复</title>
      <link href="/linux/linux01/"/>
      <url>/linux/linux01/</url>
      
        <content type="html"><![CDATA[<p>与 Windows 不同的是，在 Linux 中并不存在回收站的概念。使用 <code>rm</code> 之后想要恢复文件，可就不是简简单单的点一下还原就好了。Linux 中误删除文件还原分为两种情况：</p><ol><li>删除以后进程存在删除信息</li><li>删除以后不存在进程信息，只能借助于工具恢复</li></ol><p>​    </p><p>在这里只分析文件被删除后，相关进程还存在信息的情况：一般是有活动进程存在持续标准输入或输出，文件被删除后，进程 PID 依旧存在。这也是有些服务器删除一些文件但是磁盘不释放的原因</p><blockquote><p>当程序运行时，操作系统会专门开辟一块内存区域，提供给当前进程使用，对于依赖的文件，操作系统会发放一个文件描述符，以便读写文件，当执行 rm -f 删除文件时，只是删除了文件的目录索引节点，对于文件系统不可见，但是对于打开它的进程依然可见，即仍然可以使用先前发放的文件描述符读写文件，利用这样的原理，所以可以使用 I/O 重定向的方式来恢复文件</p></blockquote><p>​    </p><p>​    </p><h1 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h1><h2 id="模拟误删除"><a href="#模拟误删除" class="headerlink" title="模拟误删除"></a>模拟误删除</h2><p>创建一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文件</span></span><br><span class="line">[root@master01 ~]<span class="comment"># echo &quot;123&quot; &gt; a.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件内容</span></span><br><span class="line">[root@master01 ~]<span class="comment"># cat a.txt </span></span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>​    </p><p>使用 <code>tail -f</code> 打开该文件，模拟活动进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="comment"># tail -f a.txt </span></span><br><span class="line">123</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    </p><p>新开一个终端，删除该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="comment"># rm -rf a.txt</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h2><p><code>lsof</code> 查看删除的文件进程是否还存在（如果没有该命令可使用 <code>yum install -y lsof</code> 或者 <code>apt install -y lsof</code> 安装）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="comment"># lsof | grep delete | grep a.txt</span></span><br><span class="line"><span class="built_in">tail</span>      1202701       root    3r      REG      253,0     4   33918672 /root/a.txt (deleted)</span><br></pre></td></tr></table></figure><p>​    </p><p>可以看到进程 ID 为 1202701，文件为已删除（deleted） 状态，查看 <code>/proc</code> 路径下该进程的进程操作文件描述符目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master01 ~]<span class="comment"># ls -al /proc/1202701/fd</span></span><br><span class="line">total 0</span><br><span class="line">dr-x------ 2 root root  0 Feb 12 04:47 .</span><br><span class="line">dr-xr-xr-x 9 root root  0 Feb 12 04:47 ..</span><br><span class="line">lrwx------ 1 root root 64 Feb 12 04:47 0 -&gt; /dev/pts/0</span><br><span class="line">lrwx------ 1 root root 64 Feb 12 04:47 1 -&gt; /dev/pts/0</span><br><span class="line">lrwx------ 1 root root 64 Feb 12 04:47 2 -&gt; /dev/pts/0</span><br><span class="line">lr-x------ 1 root root 64 Feb 12 04:47 3 -&gt; <span class="string">&#x27;/root/a.txt (deleted)&#x27;</span></span><br><span class="line">lr-x------ 1 root root 64 Feb 12 04:47 4 -&gt; anon_inode:inotify</span><br></pre></td></tr></table></figure><p>​    </p><p>开始恢复文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拷贝该文件</span></span><br><span class="line">[root@master01 ~]<span class="comment"># cp /proc/1202701/fd/3 a.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件内容</span></span><br><span class="line">[root@master01 ~]<span class="comment"># cat a.txt </span></span><br><span class="line">123</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 运维 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
